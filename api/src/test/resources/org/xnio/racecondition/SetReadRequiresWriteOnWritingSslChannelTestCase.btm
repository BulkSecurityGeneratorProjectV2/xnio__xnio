#
# JBoss, Home of Professional Open Source.
# Copyright 2012, Red Hat, Inc., and individual contributors
# as indicated by the @author tags. See the copyright.txt file in the
# distribution for a full listing of individual contributors.
#
# This is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this software; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
#

RULE write cannot handle NEED_UNWRAP
CLASS org.xnio.ssl.JsseConnectedSslStreamChannel
METHOD handleHandshake
#AT INVOKE org.xnio.ssl.JsseConnectedSslStreamChannel.readRequiresWrite 2
AFTER INVOKE org.xnio.ssl.JsseConnectedSslStreamChannel.handleUnwrapResult
IF TRUE
DO
    debug("write could not handle NEED_UNWRAP... waking red thread before setWriteRequiresRead"),
    signalWake("write cannot handle NEED_UNWRAP", true),
    # if this thread manages to wait without timing out, an assert !readRequiesWrite()  will fail
    waitFor("read thread finished", 300),
    debug("proceeding with assert !readRequiresWrite; setWriteRequiresRead");
ENDRULE

RULE start Read thread
CLASS org.xnio.racecondition.SetReadRequiresWriteOnWritingSslChannelTestCase$Read
METHOD run
AT ENTRY
IF TRUE
DO
    debug("holding read thread"),
    waitFor("write cannot handle NEED_UNWRAP"),
    debug("starting read thread")
ENDRULE

RULE finish Read thread
CLASS org.xnio.racecondition.SetReadRequiresWriteOnWritingSslChannelTestCase$Read
METHOD run
AT EXIT
IF TRUE
DO
    debug("finished read thread... waking write thread"),
    signalWake("read thread finished")
ENDRULE
