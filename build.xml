<project name="XNIO" default="base">

    <property file="build.properties.local"/>
    <property file="build.properties"/>

    <!-- ============================================== -->
    <!-- LIBRARIES - Keep in alpha order by target name -->
    <!-- ============================================== -->

    <target name="lib.apiviz-check">
        <available property="lib.apiviz.exists" file="${lib.apiviz.local}"/>
    </target>

    <target name="lib.apiviz" depends="lib.apiviz-check" unless="lib.apiviz.exists">
        <mkdir dir="${local.repository}/${lib.apiviz.dir}"/>
        <get src="${lib.apiviz.remote}" dest="${lib.apiviz.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.apiviz.license}.txt" dest="${lib.apiviz.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <target name="lib.jboss-common-core-check">
        <available property="lib.jboss-common-core.exists" file="${lib.jboss-common-core.local}"/>
    </target>

    <target name="lib.jboss-common-core" depends="lib.jboss-common-core-check" unless="lib.jboss-common-core.exists">
        <mkdir dir="${local.repository}/${lib.jboss-common-core.local-dir}"/>
        <get src="${lib.jboss-common-core.remote}" dest="${lib.jboss-common-core.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.jboss-common-core.license}.txt" dest="${lib.jboss-common-core.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <target name="lib.junit-check">
        <available property="lib.junit.exists" file="${lib.junit.local}"/>
    </target>

    <target name="lib.junit" depends="lib.junit-check" unless="lib.junit.exists">
        <mkdir dir="${local.repository}/${lib.junit.dir}"/>
        <get src="${lib.junit.remote}" dest="${lib.junit.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.junit.license}.txt" dest="${lib.junit.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- ============================================== -->
    <!-- MODULES - Keep in alpha order by target name   -->
    <!-- ============================================== -->

    <!-- api module -->

    <target name="api.compile.depcheck">
        <mkdir dir="api/target/main"/>
        <uptodate property="api.compile.uptodate" targetfile="api/target/main/.lastcompile">
            <srcfiles dir="api/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="api.compile" depends="api.compile.depcheck" unless="api.compile.uptodate">
        <mkdir dir="api/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="api/src/main/java"
                destdir="api/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="logging-jdk.classpath"/>
            </classpath>
        </javac>
        <touch file="api/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="api.test.compile.depcheck">
        <mkdir dir="api/target/test"/>
        <uptodate property="api.compile.uptodate" targetfile="api/target/test/.lastcompile">
            <srcfiles dir="api/src/test/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="api.test.compile" depends="lib.junit,api.compile,api.test.compile.depcheck" unless="api.test.compile.uptodate">
        <mkdir dir="api/target/test/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="api/src/test/java"
                destdir="api/target/test/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="logging-jdk.classpath"/>
                <path refid="test-support.classpath"/>
                <pathelement location="${lib.junit.local}"/>
            </classpath>
        </javac>
        <touch file="api/target/test/.lastcompile" verbose="false"/>
    </target>

    <target name="api.test.pseudotarget">
        <echo message="============================================="/>
        <echo message="${message}"/>
        <echo message="============================================="/>
        <mkdir dir="api/target/test-results"/>
        <junit printsummary="true" fork="yes" includeantruntime="true">
            <sysproperty key="build.home" value="${basedir}"/>
            <sysproperty key="ant.library.dir" value="${ant.home}/lib"/>
            <sysproperty key="lib.junit.local" value="${lib.junit.local}"/>
            <jvmarg line="${test.jvmargs}"/>
            <formatter type="plain" extension="${extension}"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="logging-jdk.classpath"/>
                <path refid="test-support.classpath"/>
                <pathelement location="api/target/test/classes"/>
                <pathelement location="${lib.junit.local}"/>
            </classpath>
            <batchtest fork="yes" todir="api/target/test-results"
                       haltonfailure="no">
               <fileset dir="api/target/test/classes">
                   <include name="**/*TestCase.class"/>
               </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="api.test" depends="api,test-support,api.test.compile">
        <antcall inheritall="true" inheritrefs="true" target="api.test.pseudotarget">
            <param name="extension" value=".txt"/>
            <param name="message" value="Running with no security manager"/>
            <param name="test.jvmargs" value="-Ddummy=dummy"/>
        </antcall>
        <antcall inheritall="true" inheritrefs="true" target="api.test.pseudotarget">
            <param name="extension" value="-security.txt"/>
            <param name="message" value="Running with security manager"/>
            <param name="test.jvmargs" value="-Djava.security.manager=org.jboss.xnio.test.support.LoggingSecurityManager -Djava.security.policy=${basedir}/test-support/src/main/resources/testing.policy"/>
        </antcall>
    </target>

    <target name="api.clean">
        <delete dir="api/target"/>
    </target>

    <target name="api" description="Build the api module" depends="logging-jdk,api.compile">
        <path id="api.classpath">
            <pathelement location="api/target/main/classes"/>
            <path refid="logging-jdk.classpath"/>
        </path>
        <java taskname="version" classpathref="api.classpath" classname="org.jboss.xnio.Version" outputproperty="version"/>
        <property name="version" value="UNKNOWN"/>
    </target>

    <!-- logging-jdk module -->

    <target name="logging-jdk.compile.depcheck">
        <mkdir dir="logging-jdk/target/main"/>
        <uptodate property="logging-jdk.compile.uptodate" targetfile="logging-jdk/target/main/.lastcompile">
            <srcfiles dir="logging-jdk/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="logging-jdk.compile" depends="logging-jdk.compile.depcheck" unless="logging-jdk.compile.uptodate">
        <mkdir dir="logging-jdk/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="logging-jdk/src/main/java"
                destdir="logging-jdk/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath/>
        </javac>
        <touch file="logging-jdk/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="logging-jdk.clean">
        <delete dir="logging-jdk/target"/>
    </target>

    <target name="logging-jdk" description="Build the logging-jdk module" depends="logging-jdk.compile">
        <path id="logging-jdk.classpath">
            <pathelement location="logging-jdk/target/main/classes"/>
        </path>
    </target>

    <!-- nio-impl module -->

    <target name="nio-impl.compile.depcheck">
        <mkdir dir="nio-impl/target/main"/>
        <uptodate property="nio-impl.compile.uptodate" targetfile="nio-impl/target/main/.lastcompile">
            <srcfiles dir="nio-impl/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="nio-impl.compile" depends="nio-impl.compile.depcheck" unless="nio-impl.compile.uptodate">
        <mkdir dir="nio-impl/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="nio-impl/src/main/java"
                destdir="nio-impl/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
            </classpath>
        </javac>
        <touch file="nio-impl/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="nio-impl.test.compile.depcheck">
        <mkdir dir="nio-impl/target/test"/>
        <uptodate property="nio-impl.compile.uptodate" targetfile="nio-impl/target/test/.lastcompile">
            <srcfiles dir="nio-impl/src/test/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="nio-impl.test.compile" depends="test-support,nio-impl.compile,nio-impl.test.compile.depcheck" unless="nio-impl.test.compile.uptodate">
        <mkdir dir="nio-impl/target/test/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="nio-impl/src/test/java"
                destdir="nio-impl/target/test/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="nio-impl.classpath"/>
                <path refid="test-support.classpath"/>
                <pathelement location="${lib.junit.local}"/>
            </classpath>
        </javac>
        <touch file="nio-impl/target/test/.lastcompile" verbose="false"/>
    </target>

    <target name="nio-impl.test.pseudotarget">
        <echo message="============================================="/>
        <echo message="${message}"/>
        <echo message="============================================="/>
        <mkdir dir="nio-impl/target/test-results"/>
        <junit printsummary="true" fork="yes" includeantruntime="true" timeout="25000">
            <sysproperty key="build.home" value="${basedir}"/>
            <sysproperty key="ant.library.dir" value="${ant.home}/lib"/>
            <sysproperty key="lib.junit.local" value="${lib.junit.local}"/>
            <sysproperty key="com.sun.management.jmxremote" value=""/>
            <jvmarg line="${test.jvmargs}"/>
            <formatter type="plain" extension="${extension}"/>
            <classpath>
                <path refid="test-support.classpath"/>
                <path refid="api.classpath"/>
                <path refid="nio-impl.classpath"/>
                <pathelement location="nio-impl/target/test/classes"/>
                <pathelement location="${lib.junit.local}"/>
            </classpath>
            <batchtest fork="yes" todir="nio-impl/target/test-results"
                       haltonfailure="no">
               <fileset dir="nio-impl/target/test/classes">
                   <include name="**/*TestCase.class"/>
               </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="nio-impl.test" depends="nio-impl,test-support,nio-impl.test.compile">
        <antcall inheritall="true" inheritrefs="true" target="nio-impl.test.pseudotarget">
            <param name="extension" value=".txt"/>
            <param name="message" value="Running with no security manager"/>
            <param name="test.jvmargs" value="-Ddummy=dummy"/>
        </antcall>
        <antcall inheritall="true" inheritrefs="true" target="nio-impl.test.pseudotarget">
            <param name="extension" value="-security.txt"/>
            <param name="message" value="Running with security manager"/>
            <param name="test.jvmargs" value="-Djava.security.manager=org.jboss.xnio.test.support.LoggingSecurityManager -Djava.security.policy=${basedir}/test-support/src/main/resources/testing.policy"/>
        </antcall>
    </target>

    <target name="nio-impl.clean">
        <delete dir="nio-impl/target"/>
    </target>

    <target name="nio-impl" description="Build the nio-impl module" depends="api,nio-impl.compile">
        <path id="nio-impl.classpath">
            <pathelement location="nio-impl/target/main/classes"/>
        </path>
    </target>

    <!-- samples module -->

    <target name="samples.compile.depcheck">
        <mkdir dir="samples/target/main"/>
        <uptodate property="samples.compile.uptodate" targetfile="samples/target/main/.lastcompile">
            <srcfiles dir="samples/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="samples.compile" depends="samples.compile.depcheck" unless="samples.compile.uptodate">
        <mkdir dir="samples/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="samples/src/main/java"
                destdir="samples/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="logging-jdk.classpath"/>
            </classpath>
        </javac>
        <touch file="samples/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="samples.clean">
        <delete dir="samples/target"/>
    </target>

    <target name="samples" description="Build the samples module" depends="api,logging-jdk,samples.compile">
        <path id="samples.classpath">
            <pathelement location="samples/target/main/classes"/>
        </path>
    </target>

    <!-- test-support module -->

    <target name="test-support.compile.depcheck">
        <mkdir dir="test-support/target/main"/>
        <uptodate property="test-support.compile.uptodate" targetfile="test-support/target/main/.lastcompile">
            <srcfiles dir="test-support/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="test-support.compile" depends="test-support.compile.depcheck" unless="test-support.compile.uptodate">
        <mkdir dir="test-support/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="test-support/src/main/java"
                destdir="test-support/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="logging-jdk.classpath"/>
            </classpath>
        </javac>
        <touch file="test-support/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="test-support.clean">
        <delete dir="test-support/target"/>
    </target>

    <target name="test-support" description="Build the test-support module" depends="logging-jdk,test-support.compile">
        <path id="test-support.classpath">
            <pathelement location="test-support/target/main/classes"/>
        </path>
    </target>

    <!-- ============================================== -->
    <!-- JARS - Keep in alpha order by jar name         -->
    <!-- ============================================== -->

    <target name="jar.api" depends="api,logging-jdk" description="Build the API JAR">
        <delete file="xnio-api.jar" failonerror="false"/>
        <delete file="xnio-api-sources.jar" failonerror="false"/>
        <jar jarfile="xnio-api.jar">
            <metainf dir="${basedir}">
                <include name="COPYING.txt"/>
            </metainf>
            <manifest>
                <attribute name="Specification-Title" value="XNIO API"/>
                <attribute name="Specification-Version" value="${version}"/>
                <attribute name="Specification-Vendor" value="JBoss, a division of Red Hat, Inc."/>
                <attribute name="Implementation-Title" value="XNIO API"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Implementation-Vendor" value="JBoss, a division of Red Hat, Inc."/>
                <attribute name="Implementation-URL" value="http://www.jboss.com/xnio"/>
            </manifest>
            <zipfileset dir="api/target/main/classes" includes="**/*.class"/>
            <zipfileset dir="logging-jdk/target/main/classes" includes="**/*.class"/>
        </jar>
        <jar jarfile="xnio-api-sources.jar">
            <manifest>
                <attribute name="Specification-Title" value="XNIO API Sources"/>
                <attribute name="Specification-Version" value="${version}"/>
                <attribute name="Specification-Vendor" value="JBoss, a division of Red Hat, Inc."/>
                <attribute name="Implementation-Title" value="XNIO API Sources"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Implementation-Vendor" value="JBoss, a division of Red Hat, Inc."/>
                <attribute name="Implementation-URL" value="http://www.jboss.com/xnio"/>
            </manifest>
            <zipfileset dir="${basedir}" includesfile="COPYING.txt"/>
            <zipfileset dir="api/src/main/java" includes="**/*.java"/>
            <zipfileset dir="logging-jdk/src/main/java" includes="**/*.java"/>
        </jar>
    </target>

    <target name="jar.nio-impl" depends="api,nio-impl" description="Build the NIO implementation JAR">
        <delete file="xnio-nio.jar" failonerror="false"/>
        <delete file="xnio-nio-sources.jar" failonerror="false"/>
        <jar jarfile="xnio-nio.jar">
            <metainf dir="${basedir}">
                <include name="COPYING.txt"/>
            </metainf>
            <manifest>
                <attribute name="Specification-Title" value="XNIO NIO Implementation"/>
                <attribute name="Specification-Version" value="${version}"/>
                <attribute name="Specification-Vendor" value="JBoss, a division of Red Hat, Inc."/>
                <attribute name="Implementation-Title" value="XNIO NIO Implementation"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Implementation-Vendor" value="JBoss, a division of Red Hat, Inc."/>
                <attribute name="Implementation-URL" value="http://www.jboss.com/xnio"/>
            </manifest>
            <zipfileset dir="nio-impl/target/main/classes" includes="**/*.class"/>
        </jar>
        <jar jarfile="xnio-nio-sources.jar">
            <manifest>
                <attribute name="Specification-Title" value="XNIO NIO Implementation Sources"/>
                <attribute name="Specification-Version" value="${version}"/>
                <attribute name="Specification-Vendor" value="JBoss, a division of Red Hat, Inc."/>
                <attribute name="Implementation-Title" value="XNIO NIO Implementation Sources"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Implementation-Vendor" value="JBoss, a division of Red Hat, Inc."/>
                <attribute name="Implementation-URL" value="http://www.jboss.com/xnio"/>
            </manifest>
            <zipfileset dir="${basedir}" includesfile="COPYING.txt"/>
            <zipfileset dir="nio-impl/src/main/java" includes="**/*.java"/>
        </jar>
    </target>

    <!-- ============================================== -->
    <!-- JAVADOCS                                       -->
    <!-- ============================================== -->

    <target name="javadoc" depends="lib.apiviz,api,logging-jdk,nio-impl">
        <delete dir="docs/target/main/javadoc"/>
        <delete dir="docs/target/nio-holder"/>
        <mkdir dir="docs/target/main/javadoc"/>
        <mkdir dir="docs/target/nio-holder"/>
        <copy todir="docs/target/nio-holder">
            <fileset dir="nio-impl/src/main/java">
                <include name="**/package-info.java"/>
                <include name="**/NioXnio.java"/>
                <include name="**/NioXnioConfiguration.java"/>
            </fileset>
        </copy>
        <javadoc destdir="docs/target/main/javadoc" author="false" version="false" use="false" windowtitle="XNIO API">
            <doclet name="net.gleamynode.apiviz.APIviz" path="${lib.apiviz.local}"/>
            <packageset dir="api/src/main/java"/>
            <packageset dir="logging-jdk/src/main/java"/>
            <packageset dir="docs/target/nio-holder"/>
            <doctitle><![CDATA[<h1>XNIO version ${version}</h1>]]></doctitle>
            <header><![CDATA[XNIO version ${version}]]></header>
            <footer><![CDATA[XNIO version ${version}]]></footer>
            <bottom><![CDATA[<i>Copyright &#169; 2008 JBoss, a division of Red Hat, Inc.</i>]]></bottom>
            <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="logging-jdk.classpath"/>
                <path refid="nio-impl.classpath"/>
            </classpath>
        </javadoc>
        <delete dir="docs/target/nio-holder"/>
    </target>

    <!-- Default targets - keep depends in alpha order by category name -->
    <!-- These targets should explicitly list all modules, even if they will be built by other modules -->

    <target name="base" description="Build base modules only (no external deps)" depends="api,logging-jdk,nio-impl,test-support,javadoc"/>

    <target name="all" description="Build everything" depends="base,samples"/>

    <target name="jar" description="Build all JARs" depends="jar.api,jar.nio-impl"/>

    <target name="test" description="Run all tests" depends="api.test,nio-impl.test"/>

    <target name="clean" description="Clean everything" depends="api.clean,logging-jdk.clean,nio-impl.clean,test-support.clean"/>

</project>